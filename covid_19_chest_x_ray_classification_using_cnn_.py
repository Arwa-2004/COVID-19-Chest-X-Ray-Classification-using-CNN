# -*- coding: utf-8 -*-
"""COVID-19-Chest-X-Ray-Classification-using-CNN .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rodFPcg7CVIFFY_9qBBuqgw8Vk97hIm_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf
import keras
import os
import zipfile

from sklearn.metrics import classification_report,confusion_matrix
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

!unzip -l "/content/drive/MyDrive/COVID-19_Chest_X_Rays.zip" | head -n 50

base_dir = '/content/COVID_19_Chest_X_Rays/covid_update'
train_dir = os.path.join(base_dir, 'Train')
test_dir = os.path.join(base_dir, 'Test')

# Checking actual subfolders
print("Train folder contents:")
print(os.listdir(train_dir))
print("Test folder contents:")
print(os.listdir(validation_dir))

train_covid_dir = os.path.join(train_dir, 'covid')
train_non_covid_dir = os.path.join(train_dir, 'non_covid')
test_covid_dir = os.path.join(test_dir, 'covid')
test_non_covid_dir = os.path.join(test_dir, 'non_covid')

zip_path = '/content/drive/MyDrive/COVID_19_Chest_X_Rays.zip'
extract_dir = '/content/COVID_19_Chest_X_Rays'

if not os.path.exists(extract_dir):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)

base_dir = '/content/COVID_19_Chest_X_Rays/covid_update'
train_dir = os.path.join(base_dir, 'Train')
test_dir = os.path.join(base_dir, 'Test')

train_covid_dir = os.path.join(train_dir, 'covid')
train_normal_dir = os.path.join(train_dir, 'non_covid')

test_covid_dir = os.path.join(test_dir, 'covid')
test_normal_dir = os.path.join(test_dir, 'non_covid')

num_covid_tr = len(os.listdir(train_covid_dir))
num_normal_tr = len(os.listdir(train_non_covid_dir))

num_covid_ts = len(os.listdir(test_covid_dir))
num_normal_ts = len(os.listdir(test_non_covid_dir))

total_train = num_covid_tr + num_normal_tr
total_test = num_covid_ts + num_normal_ts

print('total training covid images:', num_covid_tr)
print('total training normal images:', num_normal_tr)

print('total validation covid images:', num_covid_ts)
print('total validation normal images:', num_normal_ts)
print("--")
print("Total training images:", total_train)
print("Total validation images:", total_test)

"""## **Visualize dataset distribution**"""

labels = ['COVID-19'] * num_covid_tr + ['NORMAL'] * num_normal_tr
sns.countplot(x=labels, palette='pastel')
plt.title("Training Class Distribution")
plt.xlabel("Class")
plt.ylabel("Number of Images")
plt.show()

labels = ['COVID-19'] * num_covid_ts + ['NORMAL'] * num_normal_ts
sns.countplot(x=labels, palette='pastel')
plt.title("Test Class Distribution")
plt.xlabel("Class")
plt.ylabel("Number of Images")
plt.show()

data_path = '/content/COVID_19_Chest_X_Rays/covid_update/Train'

genders = []
for gender_folder in os.listdir(data_path):
    full_path = os.path.join(data_path, gender_folder)
    if os.path.isdir(full_path):
        image_count = len([img for img in os.listdir(full_path) if img.endswith(('.jpg', '.png'))])
        genders.extend([gender_folder] * image_count)

sns.countplot(x=genders, palette='pastel')
plt.title("Gender Distribution")
plt.xlabel("Gender")
plt.ylabel("Number of Images")
plt.show()

# model parameters

Batch_Size = 16
Image_Size = 500

image_gen_train = ImageDataGenerator(
      rescale=1./255,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      )

train_data_gen = image_gen_train.flow_from_directory(batch_size=Batch_Size,
                                                     directory=train_dir,
                                                     color_mode = 'grayscale',
                                                     target_size=(Image_Size,Image_Size),
                                                     class_mode='binary')

# to visualize the data

plt.figure(figsize=(12, 6))
for i in range(5):
    plt.subplot(2, 5, i+1)
    plt.imshow(plt.imread(os.path.join(train_covid_dir, os.listdir(train_covid_dir)[i])), cmap='gray')
    plt.title("COVID-19")
    plt.axis('off')

    plt.subplot(2, 5, i+6)
    plt.imshow(plt.imread(os.path.join(train_non_covid_dir, os.listdir(train_non_covid_dir)[i])), cmap='gray')
    plt.title("NORMAL")
    plt.axis('off')

plt.tight_layout()
plt.show()

image_gen_val = ImageDataGenerator(rescale=1./255)

val_data_gen = image_gen_val.flow_from_directory(batch_size=Batch_Size,
                                                 directory=validation_dir,
                                                 color_mode = 'grayscale',
                                                 shuffle=False,
                                                 target_size=(Image_Size, Image_Size),
                                                 class_mode='binary')

# creating the model

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(500, 500, 1)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),


    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(2,activation='softmax')
])

model.compile(optimizer = 'adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.summary()

epochs= 13
history = model.fit(
    train_data_gen,
    steps_per_epoch=int(np.ceil(total_train / float(Batch_Size))),
    epochs=epochs,
    validation_data = val_data_gen,
    validation_steps = int(np.ceil(total_test / float(Batch_Size)))
)

model.summary()

from tensorflow.keras.utils import plot_model
plot_model(model,show_shapes=True, show_layer_names=True, rankdir='TB', expand_nested=True)

# for better visuals
sns.set_style("whitegrid")

# Extracting training history
history_dict = history.history
epochs_range = range(1, len(history_dict['accuracy']) + 1)

# Creating subplots
fig, axes = plt.subplots(1, 2, figsize=(16, 6))

# Plot Accuracy
axes[0].plot(epochs_range, history_dict['accuracy'], label='Train Accuracy', marker='o')
axes[0].plot(epochs_range, history_dict['val_accuracy'], label='Validation Accuracy', marker='s')
axes[0].set_title('Model Accuracy')
axes[0].set_xlabel('Epoch')
axes[0].set_ylabel('Accuracy')
axes[0].legend()
axes[0].grid(True)

# Plot Loss
axes[1].plot(epochs_range, history_dict['loss'], label='Train Loss', marker='o')
axes[1].plot(epochs_range, history_dict['val_loss'], label='Validation Loss', marker='s')
axes[1].set_title('Model Loss')
axes[1].set_xlabel('Epoch')
axes[1].set_ylabel('Loss')
axes[1].legend()
axes[1].grid(True)


plt.tight_layout()
plt.show()

train_accuracy = model.evaluate(train_data_gen)
print('The training accuracy is :',train_accuracy[1]*100, '%')

test_accuracy = model.evaluate(val_data_gen)
print('The testing accuracy is :',test_accuracy[1]*100, '%')